name: Pipeline Auto Approval Bot

on:
  schedule:
    # Run every minute
    - cron: '* * * * *'
  workflow_dispatch: # Allow manual triggering

jobs:
  auto-approve:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: pip install PyGithub requests

      - name: Run pipeline approval script
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_PAT }}
          USERNAME: "ossama-ferjani"
          TARGET_REPO: "devops-ci-cd-challenge"
        run: |
          python -c '
          import os
          import sys
          import time
          from github import Github, GithubException
          import requests
          import json

          def main():
              # Initialize the Github client with the provided token
              token = os.environ["GITHUB_TOKEN"]
              username = os.environ["USERNAME"]
              target_repo = os.environ["TARGET_REPO"]
              repo_full_name = f"{username}/{target_repo}"
              
              print(f"Starting pipeline auto-approval for repository: {repo_full_name}")
              
              g = Github(token)
              
              try:
                  # Get the specific repository
                  repo = g.get_repo(repo_full_name)
                  process_repository(g, repo)
                  
                  print("Pipeline auto-approval process completed successfully")
              except Exception as e:
                  print(f"Error in pipeline auto-approval process: {str(e)}")
                  sys.exit(1)

          def process_repository(g, repo):
              owner = repo.owner.login
              repo_name = repo.name
              print(f"Processing repository: {owner}/{repo_name}")
              
              try:
                  # Get workflow runs that might need approval
                  token = os.environ["GITHUB_TOKEN"]
                  
                  # Get all workflows in the repository
                  workflows = list(repo.get_workflows())
                  print(f"Found {len(workflows)} workflows in {owner}/{repo_name}")
                  
                  # Check each workflow for waiting runs
                  approval_count = 0
                  for workflow in workflows:
                      print(f"Checking workflow: {workflow.name}")
                      
                      # Get runs with "waiting" status
                      try:
                          runs = list(workflow.get_runs(status="waiting"))
                          print(f"Found {len(runs)} runs potentially awaiting approval for workflow: {workflow.name}")
                          
                          # Process each run that might need approval
                          for run in runs:
                              if approve_workflow_run(token, owner, repo_name, run.id):
                                  approval_count += 1
                      except Exception as e:
                          print(f"Error checking runs for workflow {workflow.name}: {str(e)}")
                  
                  print(f"Total approved pipeline runs: {approval_count}")
                  
              except Exception as e:
                  print(f"Error processing workflows in {owner}/{repo_name}: {str(e)}")

          def approve_workflow_run(token, owner, repo, run_id):
              headers = {
                  "Authorization": f"token {token}",
                  "Accept": "application/vnd.github.v3+json"
              }
              
              # Get pending deployments for the run
              pending_url = f"https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"
              
              try:
                  response = requests.get(pending_url, headers=headers)
                  
                  if response.status_code == 200:
                      pending_deployments = response.json()
                      
                      if pending_deployments:
                          print(f"Approving workflow run #{run_id} in {owner}/{repo}")
                          
                          # Extract environment IDs
                          environment_ids = [deploy["environment"]["id"] for deploy in pending_deployments]
                          
                          # Approve all pending deployments
                          approve_url = f"https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"
                          payload = {
                              "environment_ids": environment_ids,
                              "state": "approved",
                              "comment": "Automatically approved by Pipeline Auto-Approval Bot"
                          }
                          
                          approval_response = requests.post(
                              approve_url,
                              headers=headers,
                              data=json.dumps(payload)
                          )
                          
                          if approval_response.status_code in [200, 201]:
                              print(f"Successfully approved workflow run #{run_id}")
                              return True
                          else:
                              print(f"Failed to approve workflow run #{run_id}: {approval_response.status_code} - {approval_response.text}")
                              return False
                      else:
                          print(f"No pending deployments found for run #{run_id}")
                          return False
                  else:
                      print(f"Failed to get pending deployments for run #{run_id}: {response.status_code} - {response.text}")
                      return False
              except Exception as e:
                  print(f"Error approving workflow run #{run_id}: {str(e)}")
                  return False

          if __name__ == "__main__":
              main()
