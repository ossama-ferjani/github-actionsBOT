name: Auto-Approve Forked Repo Workflow Runs

on:
  schedule:
    - cron: '* * * * *'  # Runs every 5 minutes
  workflow_dispatch:
jobs:
  auto-approve:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.BOT_PAT }}  # Stored in trusted repo
      TARGET_REPO: ossama-ferjani/devops-ci-cd-challenge
      TARGET_WORKFLOW: build-test-deploy
      GITHUB_API_URL: https://api.github.com
    steps:
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
      
      - name: Check and approve forked workflow runs
        run: |
          echo "üîç Fetching workflow runs for $TARGET_REPO"
          
          # First get the workflow ID for the specific workflow name
          WORKFLOWS=$(curl -s -H "Authorization: Bearer $GH_TOKEN" \
            "$GITHUB_API_URL/repos/$TARGET_REPO/actions/workflows")
          
          # Debug output to check structure
          echo "Available workflows:"
          echo "$WORKFLOWS" | jq -r '.workflows[] | {name: .name, path: .path, id: .id}'
          
          # More carefully match the workflow by name or path
          WORKFLOW_ID=$(echo "$WORKFLOWS" | jq -r '.workflows[] | select(.name=="'"$TARGET_WORKFLOW"'" or ((.path | type) == "string" and (.path | contains("'"$TARGET_WORKFLOW"'")))) | .id' | head -1)
          
          if [ -z "$WORKFLOW_ID" ]; then
            echo "‚ùå Could not find workflow with name: $TARGET_WORKFLOW"
            echo "üí° Getting all waiting runs instead..."
            
            # Get all waiting runs if we can't find the specific workflow
            RESPONSE=$(curl -s -H "Authorization: Bearer $GH_TOKEN" \
              "$GITHUB_API_URL/repos/$TARGET_REPO/actions/runs?status=waiting")
          else
            echo "üìã Found workflow ID: $WORKFLOW_ID"
            
            # Get waiting runs for this specific workflow
            RESPONSE=$(curl -s -H "Authorization: Bearer $GH_TOKEN" \
              "$GITHUB_API_URL/repos/$TARGET_REPO/actions/workflows/$WORKFLOW_ID/runs?status=waiting")
          fi
          
          # Check if response contains workflow runs
          if ! echo "$RESPONSE" | jq -e '.workflow_runs' >/dev/null 2>&1; then
            echo "‚ö†Ô∏è No workflow runs found in response"
            echo "Response: $RESPONSE"
            exit 1
          fi
          
          # Filter for waiting runs
          RUNS=$(echo "$RESPONSE" | jq -r '.workflow_runs[].id')
          COUNT=$(echo "$RUNS" | grep -v '^$' | wc -l)
          
          echo "üß™ Found $COUNT pending workflow run(s) needing approval."
          
          if [ "$COUNT" -eq 0 ]; then
            echo "No waiting runs to approve."
            exit 0
          fi
          
          echo "$RUNS" | while read -r RUN_ID; do
            if [ -n "$RUN_ID" ]; then
              echo "Getting info for run ID: $RUN_ID"
              RUN_INFO=$(curl -s -H "Authorization: Bearer $GH_TOKEN" \
                "$GITHUB_API_URL/repos/$TARGET_REPO/actions/runs/$RUN_ID")
              
              # Check if waiting for approval
              RUN_STATUS=$(echo "$RUN_INFO" | jq -r '.status')
              if [ "$RUN_STATUS" != "waiting" ]; then
                echo "‚è≠Ô∏è Skipping run ID: $RUN_ID (status: $RUN_STATUS, not waiting)"
                continue
              fi
              
              # Approve all waiting runs (both fork and non-fork)
              echo "‚úÖ Approving run ID: $RUN_ID"
              APPROVAL_RESPONSE=$(curl -s -X POST \
                -H "Authorization: Bearer $GH_TOKEN" \
                -H "Accept: application/vnd.github+json" \
                "$GITHUB_API_URL/repos/$TARGET_REPO/actions/runs/$RUN_ID/approve")
              
              # Check approval response
              if [ -z "$APPROVAL_RESPONSE" ]; then
                echo "‚úì Successfully approved run ID: $RUN_ID"
              else
                echo "Response from approval: $APPROVAL_RESPONSE"
              fi
            fi
          done
